/***************************************************************************************************/
//	
//		readTrigFIFO.c
//
//	Fifo manipulation functions specific and unique to the digitizer modules of DGS, DFMA, etc.
//	Extracted from readFIFO.c 20180924 & forward, J.T. Anderson
//
//	Function list for this file is below.  There are sections of this file:  ACTIVE routines
//	that are actually used by DAQ code and DEBUG routines that exist solely for manual activation from
//	the VxWorks command line.
//
//	==========================  ACTIVE functions =============================================
//
//	int transferTrigFifoData(int bdnum, int numwords) reads 'numwords' from the MON7 fifo of the board at bdnum and stuffs same into a buffer.
//
//	==========================  DEBUG functions =============================================
//
//	void dbgReadTrigFifo(int bdnum, int FIFO_idx, int numwords) 	reads 'numwords' from the fifo of the board given by FIFO_idx of board 'bdnum' and dumps to console.
//	void dbgResetTrigFifo(int bdnum, int FIFO_idx)  				momentarily asserts and then de-asserts the reset to the fifo given by FIFO_idx of board 'bdnum'
//	void dbgSetTrigFifoOptions(int bdnum, int FIFO_idx, int ctlval)	sets the fifo control register of the selected FIFO to the value of ctlval.
//	int dbgReadTrigFifoOptions(int bdnum, int FIFO_idx)				reads current value of the fifo control register of the selected FIFO.
//
//	FIFO_idx would be a value from 1 to 16, where 1..8 mean MONITOR fifos 1..8, and 9..16 mean CHANNEL fifos 1..8.
//	By fiat, the big fifo that the DAQ reads from is MON FIFO 7.
//
/***************************************************************************************************/

#ifdef linux
	#include "readFIFO_linux.c"
#else
	#include <vxWorks.h>
	#include <stdio.h>
	#include <assert.h>
	#include <taskLib.h>
	#include <tickLib.h>
	#include <sysLib.h>
	#include <logLib.h>
	#include <freeList.h>

	#include <epicsMutex.h>
	#include <epicsEvent.h>
	#include "DGS_DEFS.h"
	#include "DBG_PRINT_CONTROL.h"

	#include "readDigFIFO.h"
	#include "devGVME.h"
	#include "vmeDriverMutex2.h"
	#include "QueueManagement.h"
	#include "profile.h"

	#ifdef READOUT_USE_DMA
		#include <cacheLib.h>
	#endif

	#ifdef MV5500
		epicsEventId DMASem;
	#endif

#endif


unsigned int BitBucket[MAX_RAW_XFER_SIZE];  //for reads that go nowhere (queue usage disabled)


/*****************************************************************************************************************/
//=======================  ACTIVE FUNCTIONS associated with inLoop state machine ================================
/****************************************************************************************************************/


/****************************************************************************
//
//	transferDigFifoData() is specific to the ANL digitizer.

 *Does xfer of fifo data. attemts dma if possible.
 *Data gets stored in one of the Queue buffers. It gets buffer from free queue
 * does dma xfer, and then puits on the full queue so sender/sorter can get it.
 *
 *
 * brdnum is logics board number, 0,1,2,3 not the slot. digs will be 0,1,2,3

 *fifo address is the vme address of fifo to read.
 * if numwords==-1, then we will dump ONE BUFFER LENGTH.
 * otherwise datasize will be number of 32bit words to dump
 * if numwords <512, no DMA done.
 * if numwords == 0 then no fifo read, but we send a buffer.
 ****************************************************************************/
int transferDigFifoData(int bdnum, int numwords,  int QueueUsageFlag, int *NumBytesTransferred)
{
    struct daqBoard *bd;	//structure of board information
    int datasize;			//amount of data to transfer

    int queue_request_stat;	//for return value from queue request function
    rawEvt *rawBuf;			//pointer to queue message buffer
    unsigned int *uintBuf;  //pointer to data read from FIFO
	

    int dmaStat = OK;

#ifdef INLOOP_PRINT_VERBOSE
	int j;
#endif
    start_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);

    bd = &daqBoards[bdnum];

    //datasize is in bytes, num of btytes to xfer from vme fifo
	//numwords, the passed-in value, is in 32-bit longwords (int)
    switch (numwords)
		{
	    //if the user passes in -1, this means "read a whole buffers's worth".
		case -1:
	        datasize=MAX_RAW_XFER_SIZE;	//defined in readFIFO.h, and is in BYTES
			break;
		// a value of zero is nonsensical and causes a return in error.
		case 0 :
			I_ErrorPrint("\ntransferDigFifo : illegal transfer length of 0 requested.  Aborting transfer.\n");
			return(-2);
		    //if neither "do max" nor zero, constrain to no bigger than MAX_RAW_XFER_SIZE
		default:
	   	    datasize=numwords * 4;	//numwords is the # of 32-bit words (from register), convert to BYTES
		    if (datasize>MAX_RAW_XFER_SIZE) 
				{
				I_CriticalPrintf("\ntransferDigFifo : datasize %d (bytes) > max transfer, chopped to %d\n", datasize,MAX_RAW_XFER_SIZE);
				datasize=MAX_RAW_XFER_SIZE;
				}
			break;
		} // end switch(numwords)
    I_InfoPrintf("numwords %d (longs), datasize %d (bytes) datasize/4 %d (longs)\n",numwords,datasize,datasize/4);
	//initialize the return value to what we're going to ask for....might change later in this routine if transfer error.
	*NumBytesTransferred = datasize;


	//================================================
	//	Buffer logic
	//
	//	If the user has said NOT to use queue system (QueueUsageFlag == 0) data read is transferred
	//	to the BitBucket array that gets overwritten each time you use it.
	//
	//	If the queue system is on, then get a buffer from the qFree queue and read the data into that
	//	buffer.  Note that what you get from the queue is a buffer DESCRIPTOR structure (rawBuf); the
	//	rawBuf structure has a POINTER to the actual data buffer.
	//================================================
    /* msgQReceive receives a message from the qFree queue; copies message to rawBuf; return value is # of bytes received, or a magic value ERROR. */
	rawBuf = NULL;		//suppress warning, initialize pointer.
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		{
		queue_request_stat = getFreeBuf(&rawBuf);	//fetch record descriptor from queue
		//handle queueing error
		if (queue_request_stat != Success)
            {
            I_ErrorPrint("Xfr Dig FIFO : Starved for raw buffers- throwing away data\n");
			*NumBytesTransferred = 0;

            stop_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);
            return(queue_request_stat);	//inLoop will keep pounding until one frees up.
            }
        //here we assume we have a buffer. else we would have returned!
        uintBuf = (unsigned int *) rawBuf->data;	//copy the pointer to the data buffer, recast to unsigned int for consistency with BitBucket definition
        rawBuf->board =  bd->board;  //copy board # from daqBoards[] system structure into rawBuf for identification
        rawBuf->len = datasize/4; //Queues, unfortunately, count BYTES, but DMA wants 32-bit longword counts...
        }
    else	//user said not to use queues
        {
        rawBuf = NULL;
        uintBuf = &BitBucket[0];
		I_InfoPrint("Queues disabled, dumping to BitBucket\n");
        }
        //we dma directly to the buffer if DMA is enabled.
        /*
         * DMA_MAX_SIZE_XFER = 256K - 4 bytes
         */
#ifdef MV5500
        //DMA from fifo of digitizer to uintBuf.
		//The possible returns here are
		//  OK
		//	ERROR (driver not initialized, or invalid argument)
		//	DGCS_LERR	(PCI bus error)
		//	DGCS_VERR	(VME error)
		//	DGCS_P_ERR	(protocol error)
        dmaStat = sysVmeDmaV2LCopy((unsigned char *)bd->FIFO,(unsigned char *)uintBuf, datasize);  //the actual read....
#endif

		if (dmaStat != OK) 
			{
			I_ErrorPrintf("DMA Error: transfer returned %d (xfer 1)\n", dmaStat);
			*NumBytesTransferred = 0;
			//if DMA failed, presumably we here return the message back to the queue.
			//In the hopes the transfer will be tried again somewhere?
            if(QueueUsageFlag == 1)
		        {
				queue_request_stat = putFreeBuf(rawBuf);
		        //It's possible the queue overflows at this point, so there should be a test
				if(queue_request_stat != Success) 
					{
					stop_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);
					return(queue_request_stat);
					}
				}	//if(QueueUsageFlag == 1)
            stop_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);
            return(DMAError);
       		} //end if (dmaStat != OK) 
		else 
			{
			I_InfoPrintf("DMA success : stat %d datasize %d\n",dmaStat,datasize);
			} //end else clause if (dmaStat != OK) 

	// All readouts should start with 0xAAAAAAAA.  Check this here before passing to queue.
	if (*uintBuf == 0xAAAAAAAA)
		{
		I_InfoPrint("\nReadDigFifo : data start correct\n");
		}
	else
		{
		I_ErrorPrintf("\nReadDigFifo : data start ERROR: expect 0xAAAAAAAA, got %08X\n", *uintBuf);
		}

    //
    // at this point the data is transferred from digitizer's fifo and is in rawBuf->data if queueing is enabled.
    // Change the state of the buffer to OWNER_Q_WRITTEN, and then enter the buffer 
    // into the qWritten queue.
    if(QueueUsageFlag == 1)
        {
		rawBuf->board = bdnum;

		rawBuf->len = datasize;		//push in length of buffer, in bytes.
		queue_request_stat = putWrittenBuf(rawBuf);
//		DumpRawEvt (rawBuf, "ReadDigFIFO", 10,0);
        //It's possible the queue overflows at this point, so there should be a test
		if(queue_request_stat != Success) 
			{
           	stop_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);
			return(queue_request_stat);
			}
	}

    stop_profile_counter(PROF_IL_XFER_DIG_FIFO_DATA);
    return(Success);   //if we haven't exited yet, declare success...

}

/****************************************************************************
 *	TriggerTypeFHeader() is called whenever there is no data in a master trigger
 *	or else the run is ending.  Either way, the function grabs a buffer off of
 *  the 'free' queue, stuffs in some data based upon the arguments provided and/or
 *  reads of the module, and then returns with a status value from the
 *  TransferFIFOReturnVals enum defined in DGS_DEFS.h.
 *
 * Arguments:
 *		mode is 0 if this is an 'update' header, 1 if this is an 'end of run' header.
 *		BoardNumber is the board number (packed in header data); from this we get the VME addresses of the board.
 *		mode of 2 means "error report"

****************************************************************************/

//Helper function for TriggerTypeFHeader
int PushTypeFToQueue(rawEvt *rawBuf, int BoardNumber, int QueueUsageFlag)
{
    if(QueueUsageFlag == 1)
		{
		rawBuf->board = BoardNumber;
		rawBuf->len = 16;		//push in length of buffer, in bytes.  For type F this is one type F header (4 32-bit words == 16 bytes)
		return(putWrittenBuf(rawBuf));
#ifdef INLOOP_PRINT_CRITICAL
		DumpRawEvt (rawBuf, "TriggerTypeF", 4,0);
#endif
		}
	else return(Success);   //Success defined in the enum BufReturnVals, in DGS_DEFS.h
}




int TriggerTypeFHeader(int mode, int BoardNumber, int QueueUsageFlag)
{
    rawEvt *rawBuf;			//pointer to queue message buffer
    unsigned int TS_MSword, TS_LSword, TS_midword;
    unsigned int *OutBufDataPtr;	//for running through buf_to_process->data
    int queue_request_stat;	//for return value from queue request function
	char *TypeOfBoard;
    
    /* get a raw data buffer for this board */
    /* msgQReceive receives a message from the qFree queue; copies message to rawBuf; return value is # of bytes received, or a magic value ERROR. */
    /* The length of the transfer is sizeof(int) as passed */
	rawBuf = NULL;		//suppress warning, initialize pointer.


	TypeOfBoard = &(BoardTypeNames[daqBoards[BoardNumber].board_type][0]);	//pointer to char[30]

    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		{
		queue_request_stat = getFreeBuf(&rawBuf);		//rawBuf is a pointer to a rawEvt struct, taken from the queue of pointers to rawEvt structs
		if (queue_request_stat != Success)
            {
            I_ErrorPrint("TriggerTypeFHeader : Starved for raw buffers- throwing away data\n");
            return(queue_request_stat);	//inLoop will keep pounding until one frees up.
            }
        //here we assume we have a buffer. else we would have returned!
        OutBufDataPtr = rawBuf->data;  //rawBuf->data is a pointer to an array of unsigned ints, the actual data buffer.
		I_InfoPrint("TriggerTypeFHeader : Got buffer\n" );
        }
    else
        {
        rawBuf = NULL;
	    OutBufDataPtr = &BitBucket[0];	//if not using queues, OutBufDataPtr instead points to a stand-alone buffer that gets reused over and over.
        }
    
    //========================================================================================
    //Build the 'event header'.
	//To make the data palatable for the sender/receiver/event builder, the first 4
	//words must be as follows.
	//0	FIXED 0xAAAAAAAA
	//1	Geo Addr(31:27)/PACKET LENGTH(26:16)/USER PACKET DATA(15:04)/CHANNEL ID(3:0)
	//2	LEADING EDGE DISCRIMINATOR TIMESTAMP[31:0]
	//3	HEADER LENGTH(31:26)/EVENT TYPE(25:23)/0/0/0/HEADER TYPE(19:16)/LEADING EDGE DISCRIMINATOR TIMESTAMP[47:32]

	//The PACKET LENGTH is defined as the # of 32-bit longwords in the event, not counting
	//the 0xAAAAAAAA word.

	//The HEADER LENGTH is defined as the # of 32-bit longwords in the header, not counting
	// the 0xAAAAAAAA word.

    //  The mode argument to this function declares the details of the 1st and 3rd words
    //========================================================================================
    if (mode == 0)	//mode 0: update header (trigger was empty when polled)
        {
#ifdef INLOOP_GENERATE_EMPTY_TYPEF
        //0	FIXED AAAAAAAA
    	*OutBufDataPtr = 0xAAAAAAAA; OutBufDataPtr++;		//begininng of the trigger header

        //1	Geo Addr(31:27)/PACKET LENGTH(26:16)/USER PACKET DATA(15:04)/CHANNEL ID(3:0)
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--0xE for Empty
        //     |                  |                       +--as taken from the board
        //     |                  +-- Fixed value of 3 (length of this minimal header, not counting the 0xAAAAAAAA
        //     +-- taken from daq_board structure (->base value)
        *OutBufDataPtr  = 
						(daqBoards[BoardNumber].board << 27)	//BoardNumber is value from 0 to 6, from the main for loop in inLoop.  It's the board INDEX, not the slot number. For slot # use daqBoards[BoardNumber].board.
						+ 0x00030000		//packet length aligned to bit 16
						+ ((daqBoards[BoardNumber].DigUsrPkgData & 0xFFF) << 4)
                        + 0x0000000E;		//0xE for empty
        OutBufDataPtr++;
        //2	LEADING EDGE DISCRIMINATOR TIMESTAMP[31:0]  
		*(daqBoards[BoardNumber].base32 + (0x8E0/4)) = 0x10;		//set bit 4 of PulsedCtrl 1 register to latch the timestamp
        TS_LSword = *(daqBoards[BoardNumber].base32 + (0x288/4));	//read bits 15:00 of live timestamp
        TS_midword = *(daqBoards[BoardNumber].base32 + (0x284/4));	//read bits 31:16 of live timestamp
        TS_MSword = *(daqBoards[BoardNumber].base32 + (0x280/4));	//read bits 47:32 of live timestamp
        I_InfoPrintf("TriggerTypeFHeader: FIFO of %s module #%d is EMPTY at timestamp 0x%04X%04X%04X\n",TypeOfBoard, BoardNumber, (TS_MSword & 0xFFFF),(TS_midword & 0xFFFF),(TS_LSword & 0xFFFF) );
		TS_midword = ((TS_midword & 0xFFFF) << 16) + (TS_LSword & 0xFFFF);
        *OutBufDataPtr  = TS_midword; OutBufDataPtr++;

        //3	HEADER LENGTH(31:26)/EVENT TYPE(25:23)/0/0/0/HEADER TYPE(19:16)/LEADING EDGE DISCRIMINATOR TIMESTAMP[47:32]
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--previously read
        //     |                  |                       +--by fiat, the value 0xF
        //     |                  +--set to the value 1, defined as "this is trigger information"
        //     +-- defined as 3
        *OutBufDataPtr  = 0x0C800000	//header length of 3, event type is informational (001)
                        + 0x000F0000	//mark as informational header with header type 15 decimal (0xF)
                        + TS_MSword;	//timestamp, bits 47:32
        OutBufDataPtr++;

        //After writing the type F header, do queue maintenance.
		return (PushTypeFToQueue(rawBuf, BoardNumber, QueueUsageFlag));
#endif

#ifndef INLOOP_GENERATE_EMPTY_TYPEF
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		return(putFreeBuf(rawBuf));
#endif

        }  //end if (mode == 0)
//=========================================================================================================================================


    if (mode == 1)	//mode 1: issue header stating that trigger is empty and will not have new data (End of Data)   
        {
#ifdef INLOOP_GENERATE_EOD_TYPEF
        //0  Fixed AAAAAAAA
        OutBufDataPtr = rawBuf->data;  //I assume 'unsigned int' in VxWorks is a 32-bit object...
        *OutBufDataPtr = 0xAAAAAAAA; OutBufDataPtr++;		//begininng of the trigger header

        //1	Geo Addr(31:27)/PACKET LENGTH(26:16)/USER PACKET DATA(15:04)/CHANNEL ID(3:0)
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--0xD for Run is Done
        //     |                  |                       +--as taken from digitizer
        //     |                  +-- Fixed value of 3 (length of this minimal header, not counting the 0xAAAAAAAA
        //     +-- taken from daq_board structure (->base value)
        *OutBufDataPtr  = 
						(daqBoards[BoardNumber].board << 27)	//BoardNumber is value from 0 to 6, from the main for loop in inLoop.  It's the board INDEX, not the slot number. For slot # use daqBoards[BoardNumber].board.
						+ 0x00030000		//packet length aligned to bit 16
						+ ((daqBoards[BoardNumber].DigUsrPkgData & 0xFFF) << 4)
                        + 0x0000000D;		//0xD for done
        OutBufDataPtr++;

        //2	LEADING EDGE DISCRIMINATOR TIMESTAMP[31:0]  
        TS_LSword = *(daqBoards[BoardNumber].base32 + (0x48C/4));	//read bits 31:00 of live timestamp
        TS_MSword = *(daqBoards[BoardNumber].base32 + (0x490/4));	//read bits 47:32 of live timestamp
        I_CriticalPrintf("TriggerTypeFHeader: EndOfData announced for %s module #%d at timestamp 0x%04X%08X\n",TypeOfBoard, BoardNumber, (TS_MSword & 0xFFFF), TS_LSword);
        *OutBufDataPtr  = TS_LSword; OutBufDataPtr++;

        //3	HEADER LENGTH(31:26)/EVENT TYPE(25:23)/0/0/0/HEADER TYPE(19:16)/LEADING EDGE DISCRIMINATOR TIMESTAMP[47:32]
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--previously read
        //     |                  |                       +--by fiat, the value 0xF
        //     |                  +--set to the value 1, defined as "this is information specific to the trigger"
        //     +-- defined as 3
        *OutBufDataPtr  = 0x0C800000	//header length of 3, event type is informational (001).
                        + 0x000F0000	//mark as end-of-run header with header type 15 decimal (0xF)
                        + TS_MSword;	//timestamp, bits 47:32
        OutBufDataPtr++;

        //After writing the type F header, do queue maintenance.
		return (PushTypeFToQueue(rawBuf, BoardNumber, QueueUsageFlag));
#endif

#ifndef INLOOP_GENERATE_EOD_TYPEF
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		return(putFreeBuf(rawBuf));
#endif

        } // end else if (mode == 1).... clause
//=========================================================================================================================================


    if (mode == 2)	//mode 2: issue header stating that digitizer overflowed and was forcibly cleared.
		{
#ifdef INLOOP_GENERATE_ERROR_TYPEF
        //0  Fixed AAAAAAAA
        OutBufDataPtr = rawBuf->data;  //I assume 'unsigned int' in VxWorks is a 32-bit object...
        *OutBufDataPtr = 0xAAAAAAAA; OutBufDataPtr++;		//begininng of the digitizer header

        //1	Geo Addr(31:27)/PACKET LENGTH(26:16)/USER PACKET DATA(15:04)/CHANNEL ID(3:0)
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--0xF means FIFO ERROR
        //     |                  |                       +--package data from digitizer.
        //     |                  +-- Fixed value of 3 (length of this minimal header, not counting the 0xAAAAAAAA
        //     +-- taken from daq_board structure (->base value)
        *OutBufDataPtr  = 
						(daqBoards[BoardNumber].board << 27)	//BoardNumber is value from 0 to 6, from the main for loop in inLoop.  It's the board INDEX, not the slot number. For slot # use daqBoards[BoardNumber].board.
						+ 0x00030000		//packet length aligned to bit 16
						+ ((daqBoards[BoardNumber].DigUsrPkgData & 0xFFF) << 4)
                        + 0x0000000F;		//0xF for FIFO issue
        OutBufDataPtr++;

        //2	LEADING EDGE DISCRIMINATOR TIMESTAMP[31:0]  
        TS_LSword = *(daqBoards[BoardNumber].base32 + (0x48C/4));	//read bits 31:00 of live timestamp
        TS_MSword = *(daqBoards[BoardNumber].base32 + (0x490/4));	//read bits 47:32 of live timestamp
        I_ErrorPrintf("TriggerTypeFHeader: FIFO Overflow Error announced for %s module #%d at timestamp 0x%04X%08X\n",TypeOfBoard, BoardNumber, (TS_MSword & 0xFFFF), TS_LSword);
        *OutBufDataPtr  = TS_LSword; OutBufDataPtr++;
        //3	HEADER LENGTH(31:26)/EVENT TYPE(25:23)/0/0/0/HEADER TYPE(19:16)/LEADING EDGE DISCRIMINATOR TIMESTAMP[47:32]
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--previously read
        //     |                  |                       +--by fiat, the value 0xF
        //     |                  +--value is 1 : overflow error
        //     +-- defined as 3
        *OutBufDataPtr  = 0x0C800000	//header length of 3, event type 1 (overflow)
                        + 0x000F0000	//mark as informational header with header type 15 decimal (0xF)
                        + TS_MSword;	//timestamp, bits 47:32
        OutBufDataPtr++;

        //After writing the type F header, do queue maintenance.
		return (PushTypeFToQueue(rawBuf, BoardNumber, QueueUsageFlag));
#endif

#ifndef INLOOP_GENERATE_ERROR_TYPEF
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		return(putFreeBuf(rawBuf));
#endif

        } // end if (mode == 2)
//=========================================================================================================================================

    if (mode == 3)	//mode 3: issue header stating that trigger UNDERFLOWED and was forcibly cleared.
		{
#ifdef INLOOP_GENERATE_ERROR_TYPEF
        //0  Fixed AAAAAAAA
        OutBufDataPtr = rawBuf->data;  //I assume 'unsigned int' in VxWorks is a 32-bit object...
        *OutBufDataPtr = 0xAAAAAAAA; OutBufDataPtr++;		//begininng of the trigger header

        //1	Geo Addr(31:27)/PACKET LENGTH(26:16)/USER PACKET DATA(15:04)/CHANNEL ID(3:0)
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--0xF means FIFO ERROR
        //     |                  |                       +--package data as read f
        //     |                  +-- Fixed value of 3 (length of this minimal header, not counting the 0xAAAAAAAA
        //     +-- taken from daq_board structure (->base value)
        *OutBufDataPtr  = 
						(daqBoards[BoardNumber].board << 27)	//BoardNumber is value from 0 to 6, from the main for loop in inLoop.  It's the board INDEX, not the slot number. For slot # use daqBoards[BoardNumber].board.
						+ 0x00030000		//packet length aligned to bit 16
						+ ((daqBoards[BoardNumber].DigUsrPkgData & 0xFFF) << 4)
                        + 0x0000000F;		//0xF for FIFO Error
        OutBufDataPtr++;

        //2	LEADING EDGE DISCRIMINATOR TIMESTAMP[31:0]  
        TS_LSword = *(daqBoards[BoardNumber].base32 + (0x48C/4));	//read bits 31:00 of live timestamp
        TS_MSword = *(daqBoards[BoardNumber].base32 + (0x490/4));	//read bits 47:32 of live timestamp
        I_ErrorPrintf("TriggerTypeFHeader: FIFO Underflow Error announced for %s module #%d at timestamp 0x%04X%08X\n",TypeOfBoard, BoardNumber, (TS_MSword & 0xFFFF), TS_LSword);
        *OutBufDataPtr  = TS_LSword; OutBufDataPtr++;
        //3	HEADER LENGTH(31:26)/EVENT TYPE(25:23)/0/0/0/HEADER TYPE(19:16)/LEADING EDGE DISCRIMINATOR TIMESTAMP[47:32]
        //     ^                  ^                       ^                  ^
        //     |                  |                       |                  +--previously read
        //     |                  |                       +--by fiat, the value 0xF
        //     |                  +--value is 2 : underflow error
        //     +-- defined as 3
        *OutBufDataPtr  = 0x0D000000	//header length of 3, event type 2 (underflow)
                        + 0x000F0000	//mark as informational header with header type 15 decimal (0xF)
                        + TS_MSword;	//timestamp, bits 47:32
        OutBufDataPtr++;

        //After writing the type F header, do queue maintenance.
		return (PushTypeFToQueue(rawBuf, BoardNumber, QueueUsageFlag));
#endif

#ifndef INLOOP_GENERATE_ERROR_TYPEF
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		return(putFreeBuf(rawBuf));
#endif
        } // end if (mode == 3)
//=========================================================================================================================================
    if(QueueUsageFlag == 1) // 1 means yes, use the queue system
		return(putFreeBuf(rawBuf));
	return(IncorrectModeArg);
}

/***********************************************************************************/
//
//  dbgReadDigFifo() reads 'n' words from the FIFO of a digitizer and dumps data
//  to the console.  NOT USED BY DAQ.  CONSOLE DEBUG USE ONLY.  
//
/***********************************************************************************/
void dbgReadDigFifo(int board, int numwords, int mode)
{
    int datasize;			//amount of data to transfer
    unsigned int *uintBuf;  //pointer to data read from FIFO
	int j;
    struct daqBoard *bd;	//structure of board information
    int dmaStat = OK;

    bd = &daqBoards[board];

    //datasize is in bytes, num of btytes to xfer from vme fifo
    //constrain to no bigger than MAX_RAW_XFER_SIZE
    if (numwords==-1)
		{
		datasize = *(daqBoards[board].base32 + (0x004/4));	//read from 'programming done' to get depth of FIFO and read that.
		datasize = datasize & 0x007FFFF;	//make sure flag bits aren't included in read depth.
		datasize = datasize * 4;			//convert value read (longwords) to number of BYTES to DMA
		}
    else
        datasize=numwords * 4;	//numwords is the # of 32-bit words (from register), convert to BYTES

    if (datasize>MAX_RAW_XFER_SIZE) datasize=MAX_RAW_XFER_SIZE;
    printf("numwords %d (longs), datasize %d (bytes) datasize/4 %d (longs)\n",numwords,datasize,datasize/4);
    uintBuf = &BitBucket[0];

	if(mode == 1)	//dma mode
		{
		dmaStat = sysVmeDmaV2LCopy((unsigned char *)bd->FIFO,(unsigned char *)uintBuf, datasize);  //the actual read....
		if (dmaStat != OK) {
			printf("DMA Error: transfer returned %d (xfer 1)\n", dmaStat);
			}
		else {
			printf("DMA success : stat %d datasize %d\n",dmaStat,datasize);
			}
		}
	else
		{
		printf("Dumping %d words to buffer, not using DMA\n",(datasize/4));
        for (j = 0; j < (datasize/4); j++) 
			{
			*uintBuf = *((unsigned int *) bd->FIFO);  //longword by longword, pump mud.
			uintBuf++;
			}
		}

	//either way you get it, now dump the data.
	for (j = 0; j < (datasize/4); j++) {
		printf("index:%04d    data:%08X\n",j,BitBucket[j]);
	}


}









	/***************************************************************************************/
	//
	//	dbgEventToTrig is a software method to generate 'n' manual triggers to the trigger
	//  master, presumably to generate some number of events.  Not particularly useful in 
	//  terms of triggers to the digitizer modules, but could be useful for exercising
	//  the trigger FIFO.
	//
	/***************************************************************************************/
	void dbgEventToTrig(int i, int nevents)
	{
		daqBoard *bd;
		int k,w,aa;
		int *addr;

		//wait time between trig events
		int const dbgEvtWait=10000;

		vmeMutexLock(fifo_mutex_id);
		bd = &daqBoards[i];

		//enable manual triggers in trig mask
		addr = (int*)(bd->base32 + 0x850/4);
		*addr = *addr | 0x1;   //read-modify-write.  Presumably this works with a VME mapped address..

		addr=(int*)(bd->base32 + 0x8e0/4);  // this is setting addr to point to PULSED_CTRL_1

		for (k=0; k<nevents; k++) 
			{
			if (k%50 == 0) printf("Event %d\n",k);
			*addr=0x8000;		//setting bit 15 of PULSED_CTL_1 causes a manual trigger
			//wait awhile
			for (w=0; w<dbgEvtWait; w++) aa=1;  //apparently the assignment is required to keep the compiler from optimizing this away?
			}

		vmeMutexUnLock(fifo_mutex_id);
	}


	/***********************************************************************************/
	//
	//  dbgReadTrigFifo() reads 'n' words from the fifo at address 0x178 and dumps data
	//  to the console.  Address 0x178 is Monitor Fifo 7, the FIFO that has the trigger's
	//  overall status (trigger timestamps and TDC) information.
	//
	/***********************************************************************************/

	void dbgReadTrigFifo(int i, int words)
	{
		int k;
		int *addr;
		daqBoard *bd;
		int data;
		int nprints=100;

		bd = &daqBoards[i];
		vmeMutexLock(fifo_mutex_id);
		addr = (int*)(bd->base32 + 0x178/4);

		for (k=0; k<words; k++) 
			{
			data = *addr;		//read word
			if (words<=nprints) printf("0x%x\n",data);		//prints out only first 100 words read
			else if (k%nprints==0) printf("0x%x\n",data);   //then prints out every 100th word thereafter
			}

		vmeMutexUnLock(fifo_mutex_id);
	}

	/****************************************************************************
	 *	checkFIFOTrig() reads the status of fifo MON7 of a trigger module and
	 *  returns a numeric code indicative of how full the FIFO is.
	 *
	 *  The numeric code is a bitmask:

			Bit     meaning
			7       fifo underflow     (more data was read than available)
			6       fifo overflow
			5       fifo full
			4       fifo almost-full
			3       fifo prog-full    (this bit will set when the FIFO is half full - 32768 words available)
			2       fifo prog-empty   (this bit will set if there is less than 16384 words available to read)
			1       fifo almost empty
			0       fifo empty
	 *
	 *
	 *		The exact number of words available is returned through the pointer *actual_depth.
	 *	
	 ****************************************************************************/
	int checkFIFOTrig(int *actual_depth)
	{
		volatile unsigned int Trig_MON7_status;
		volatile int fifo_depth = 0;

		daqBoard *bd;

		if (TrigFIFO_trace>0) printf("checkFIFOTrig\n");
		bd = &daqBoards[i];
		//
		//fifo offset address is 1B4, and we have to convert byte addr to long addr, hence/4
		//similarly, address 0x154 reads back how many words are in the fifo.
		//
		vmeMutexLock(fifo_mutex_id);
		Trig_MON7_status = *(bd->base32 + 0x1b4/4);	//do the read
		fifo_depth = *(bd->base32 + 0x154/4);		//do the read
		vmeMutexUnLock(fifo_mutex_id);

		if (TrigFIFO_trace>1) {
			printf("checkFIFOTrig: underflow %d, overflow %d, full %d, almost-full %d, prog-full %d, prog-empty %d, almost empty %d, empty %d\n"
				   (Trig_MON7_status & 0x80) >> 7,
				   (Trig_MON7_status & 0x40) >> 6,
				   (Trig_MON7_status & 0x20) >> 5,
				   (Trig_MON7_status & 0x10) >> 4,
				   (Trig_MON7_status & 0x08) >> 3,
				   (Trig_MON7_status & 0x04) >> 2,
				   (Trig_MON7_status & 0x02) >> 1,
				   (Trig_MON7_status & 0x01) >> 0);

			printf("checkFIFOTrig: depth %d  0x%x\n",fifo_depth, fifo_depth);
		}

		 *actual_depth = fifo_depth;
		 return Trig_MON7_status;
	}

	/****************************************************************************
	 *   drainFIFOTrig() is not a reset of the FIFO to empty it, but just sucks
	 *   data until the FIFO is empty. 
	 *
	 ****************************************************************************/
	int drainFIFOTrig(int bdnum)
	{
		rawEvt *rawBuf;
		unsigned int tmp;		//placeholder for word read
		int tmpCount;			//running count of number of words available
		int resetCnt;			//for loop index for draining loop
		int trig_FIFO_stat, trig_FIFO_numwords;	
		int total_drain_count = 0;
		daqBoard *bd;

		if (TrigFIFO_trace>1) printf("drainFIFOTrig No: %d\n",bdnum);

		bd = &daqBoards[bdnum];	//bdnum is expected to be the index number of a trigger board, not a digitizer
		/* clear message queues */
		while (msgQReceive(gDigRawQ, (char *) &rawBuf, sizeof(rawEvt *),NO_WAIT) != ERROR) {
			fifoBufsCount(1);
			stat = msgQSend(gDigRawRetQ, (char *) &rawBuf, sizeof(rawEvt *),NO_WAIT, MSG_PRI_NORMAL);
			rawBuf->owner=1;	//0=undef, 1=retQ,2=rawQ, 3=getRawBuf, 4=servuceBuff,5 getFreshBufferDGS
		}

		/* Begin draining loop */
		vmeMutexLock(fifo_mutex_id);
		trig_FIFO_stat = checkFIFOTrig(&trig_FIFO_numwords);  //ask trigger board how many words are available
		total_drain_count = 0;
		if (TrigFIFO_trace>1) printf("fifo 0x%lx states %d words available\n", (unsigned long)bd->base32), trig_FIFO_numwords);
		
		for(resetCnt = 0; resetCnt < trig_FIFO_numwords; resetCnt++) 
			{
			tmp = *(bd->base32 + 0x0178/4);		//Read one word from MON7 fifo of trigger
			trig_FIFO_stat = checkFIFOTrig(&tmpCount);
			total_drain_count++;
			if (trig_FIFO_stat < 0) 		//if FIFO status reads back underflow (-1), exit early
				{
				if (TrigFIFO_trace>1) printf("Underflow error! \n");
				return (trig_FIFO_stat);
				}
			}

		//upon breaking from loop, if trig_FIFO_stat is 0, all good.
		//trig_FIFO_stat < 0, shouldn't be possible.
		//trig_FIFO_stat > 0, words are still left - possibly new data came in while in drain loop. 
		
		if (trig_FIFO_stat > 0)
			{
			if (TrigFIFO_trace>1) printf("FIFO not empty after presribed number of words read; %d words left\n", tmpCount);
			while (trig_FIFO_stat > 0)
				{
				tmp = *(bd->base32 + 0x0178/4);		//Read one word from MON7 fifo of trigger
				trig_FIFO_stat = checkFIFOTrig(&tmpCount);
				total_drain_count++;
				if (TrigFIFO_trace>1) printf("continuing draining... %d words left\n", tmpCount);
				}
		vmeMutexUnLock(fifo_mutex_id);
		if (TrigFIFO_trace>1) printf("cleared %d words from fifo 0x%lx", total_drain_count,(unsigned long)bd->base32);

		return 0;
	}

