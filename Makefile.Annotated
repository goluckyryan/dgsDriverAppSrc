TOP=../..

include $(TOP)/configure/CONFIG
#----------------------------------------
#  ADD MACRO DEFINITIONS AFTER THIS LINE
#=============================

#==================================================

# Build an IOC support library
USR_CFLAGS_vxWorks-ppc604_long += -DMV5500
USR_CFLAGS_vxWorks-ppc604 += -DRIO3 \
        -I/remote/devel/vxWorks/Tornado2.2/target/config/rio3

#JTA : line below commented out to remove linkages to "gretina" trees.
#USR_INCLUDES_vxWorks += -I$(DATASERVER)/gretDataApp/src 



#  JTA : added my own .h file DGS_DEFS.h to this INC statement to 
#  allow exclusion of GRETINA-specific code and/or inclusion of
#  DGS-specific code into the build.
INC += readDigFIFO.h readTrigFIFO.h DGS_DEFS.h QueueManagement.h

HOST_OPT = NO

DBEXPAND = msi

# xxxRecord.h will be created from xxxRecord.dbd
# DBDINC += xxxRecord
# install devXxxSoft.dbd into <top>/dbd
# DBD += xxxSupport.dbd

# The following are compiled and added to the Support library

# devDAQSupport_LIBS += $(EPICS_BASE_IOC_LIBS)

#=============================
# build an ioc application

#LIBRARY_IOC_<osclass> += <name>
#Library <name> will be created for all IOC type archs of the speciÔ¨Åed osclass.

LIBRARY_IOC_vxWorks += devDGSDriverSupport


devDGSDriverSupport_SRCS += drvAsynDigitizer.c
devDGSDriverSupport_SRCS += asynDigitizerDriver.cpp
devDGSDriverSupport_SRCS += drvAsynDebug.c
devDGSDriverSupport_SRCS += asynDebugDriver.cpp

devDGSDriverSupport_SRCS += asynTrigCommonDriver.cpp
devDGSDriverSupport_SRCS += asynTrigMasterDriver.cpp
devDGSDriverSupport_SRCS += asynTrigRouterDriver.cpp

devDGSDriverSupport_SRCS += drvAsynTrigMaster.c
devDGSDriverSupport_SRCS += drvAsynTrigRouter.c


devDGSDriverSupport_SRCS += readDigFIFO.c
devDGSDriverSupport_SRCS += readTrigFIFO.c
devDGSDriverSupport_SRCS += QueueManagement.c
# JTA: no idea what "chargeInject" would be...
# but it has some "registrar" function the build is dependent upon.
#   devDGSDriverSupport_SRCS += chargeInject.c
devDGSDriverSupport_SRCS += restoreSub.c
devDGSDriverSupport_SRCS += inLoop.st
#  JTA: removing the sim version as we're going to re-do the buffering anyway.
# but it is reference elsewhere so must use or the munch file fails.
# # devDGSDriverSupport_SRCS += inLoopSim.st
# #devDGSDriverSupport_SRCS += inLoopTrig.st
devDGSDriverSupport_SRCS += equalSub.c
devDGSDriverSupport_SRCS += vmeDriverMutex.c

# devDGSDriverSupport_SRCS += packetHeader.c

devDGSDriverSupport_SRCS += outLoopSupport.c
devDGSDriverSupport_SRCS += outLoop.st


PROD_IOC_vxWorks = dgsDriver
# dgsDriver.dbd will be created and installed
# DBD += gretDAQ.dbd
DBD += dgsDriver.dbd


# gretDAQ.dbd will be made up from these files:
# dgsDriver_DBD += base.dbd
dgsDriver_DBD += asyn.dbd
dgsDriver_DBD += dgsDriverSupport.dbd
# dgsDriver_DBD += dgsDriverInclude.dbd
dgsDriver_DBD += inLoop.dbd
dgsDriver_DBD += outLoop.dbd

# <name>_registerRecordDeviceDriver.cpp will be created from <name>.dbd
# dgsDriver_SRCS += inLoop.st
# dgsDriver_SRCS += readFIFO.c
# dgsDriver_SRCS +=asynDigitizerDriver.cpp
# dgsDriver_SRCS +=drvAsynDigitizer.c
dgsDriver_SRCS += dgsDriver_registerRecordDeviceDriver.cpp

# NOTE: To build SNL programs, SNCSEQ must be defined
# in the <top>/configure/RELEASE file

# ifneq ($(SNCSEQ),)
    # This builds sncExample as a component of gretDAQ
    # gretDAQ_DBD += sncExample.dbd


    # gretDAQ_SRCS += sncExample.stt
    # gretDAQ_LIBS += seq pv
#
    ## The following builds sncProgram as a standalone application
    # PROD_HOST += sncProgram
    # sncProgram_SNCFLAGS += +m
    # sncProgram_SRCS += sncProgram.st
    # sncProgram_LIBS += seq pv
    # sncProgram_LIBS += $(EPICS_BASE_HOST_LIBS)
# endif

# gretDAQ_LIBS += $(EPICS_BASE_IOC_LIBS)

dgsDrivers_LIBS += asyn devDGSDriverSupport


#===========================

include $(TOP)/configure/RULES
#----------------------------------------
#  ADD RULES AFTER THIS LINE

